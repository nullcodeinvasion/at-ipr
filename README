            Тестирование REST-сервиса http://petstore.swagger.io
В этой главе тебе предстоит протестировать REST-сервис. Для начала перейди по ссылке http://petstore.swagger.io.
Изучи инструмент Swagger, т.к. это один из самых современных инструментов описания REST-сервисов.
Естественно, тестировать всю функциональность сервиса не имеет смысла. Твоя задача – протестировать следующую функциональность:
  1.	получение списка животных по статусу;
  2.	создание животного;
  3.	создание заказа на животное;
  4.	обновление информации по животному;
  5.	удаление животного;
  6.	удаление заказа на животное.
 Все запросы выполнять без использования авторизации.

Составление тест-кейсов лежит на тебе (используй техники тест-дизайна). Вышеописанный функционал должен быть протестирован в полном объёме.

Запуск браузера Google Chrome как отдельный сценарий
Создай отдельный сценарий с запуском браузера Google Chrome и открытием страницы https://ya.ru. Автотест должен проверить, что элемент поиска доступен на странице. Если элемент не найден, сделай скриншот и приложи его к отчёту Allure.
Ожидания используй неявные.
При этом браузер Google Chrome должен быть портативным (запускаемым без установки на компьютере). Это делается для того, чтобы постоянные обновления браузера не ломали автотесты (при каждом обновлении браузера нужно будет использовать новую версию chromedriver).
Портативный Google Chrome положи в файлы проекта и выкачивай его на GIT.






      Отчёт
Полный отчёт должен быть отражён в БД. Для этого создай свою БД произвольной структуры. В ней расположи таблицу AutotestLog с пятью столбцами: Время логирования, Название сценария, Название шага, Результат выполнения шага, Ошибка (может быть NULL).
После каждого шага автотеста, в БД должна создаваться запись о статусе выполнения тестирования текущего шага. Столбец «Ошибка» заполняется только в том случае, если статус тестирования текущего шага упало с ошибкой. В остальных случаях столбец заполняется NULL.

      Настройка Jenkins
	Разверни Jenkins на любой машине. Имей в виду, что Jenkins под Windows можно развернуть двумя способами:
  1.	С помощью исполняющего WAR файла
  2.	С помощью службы Windows
У каждого варианта есть свои плюсы и минусы. Для нас, как автотестировщиков, минус реализации через службу Windows заключается в том, что, при запуске задачи по автотестированию веб-сайта, окно браузера будет невидимым на Jenkins машине. Из этого следует печальное ограничение на невозможность создания скриншотов веб-страниц. При этом реализация через службу делает незаметными для пользователя запуски задач на Jenkins, в то время как WAR версия будет отображать все запуски «как есть» (с окнами браузера, CMD консолями и тд.) В такой реализации будет очень просто сломать GUI автотест случайным дёрганьем мышки, к тому же работать за компьютером под пользователем, с которого развёрнут Jenkins, будет невозможно.
В больших Jenkins проектах используют несколько нод, где есть МАСТЕР нода (на которой стоит Jenkins и откуда можно производить все настройки) и ВЕДОМЫЕ ноды (Slave), где непосредственно прогоняются задачи. Это вариант настройки Jenkins в рамках текущего ИПРа не рассматривается, но о возможности подобной реализации стоит знать.
Создай простой проект с двумя параметрами на запуск: TAGS и DbLogEnable. В качестве параметра TAGS будем указывать теги сценариев, которые мы хотим запустить (имей в виду, что тег @all должен быть у каждого сценария в SpecFlow). Параметр DbLogEnable будет указывать на необходимость логирования автотеста в БД. Если параметр выставлен true, то будет происходить логирование в БД, иначе (DbLogEnable = false) логировать прогон автотеста в БД не будем.
Настрой запланированный запуск автотестов с тегом @all: каждый будний день, в 0:15.
Настрой выкачку своего кода автотестов из GIT при каждом запуске задачи. 
Проведи несколько запусков автотестов чтобы убедиться, что всё работает корректно. 
